#+TITLE: LVGL on Oniro
#+AUTHOR: Philippe.Coval + G치bor.Kiss-V치mosi #FOSDEM2022
#+EMAIL: philippe.coval@huawei.com, gabor@lvg.io

#+OPTIONS: num:nil, timestamp:nil, toc:nil, tags:nil, tag:nil, ^:nil
#+REVEAL_DEFAULT_FRAG_STYLE: appear
#+REVEAL_DEFAULT_SLIDE_BACKGROUND: https://oniroproject.org/images/shapes.png
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_OPACITY: 0.15
#+REVEAL_EXTRA_CSS: ../oniro-template/local.css
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Presentations slides">
#+REVEAL_HLEVEL: 3
#+REVEAL_INIT_OPTIONS: transition:'zoom'
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_ROOT: https://cdn.jsdelivr.net/gh/hakimel/reveal.js@4.1.0/
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_THEME: night
#+REVEAL_PLUGINS: (highlight)
#+MACRO: tags-on-export (eval (format "%s" (cond ((org-export-derived-backend-p org-export-current-backend 'md) "#+OPTIONS: tags:1") ((org-export-derived-backend-p org-export-current-backend 'reveal) "#+OPTIONS: tags:nil num:nil reveal_single_file:t"))))

#+begin_export html
<!--
SPDX-License-Identifier: CC-BY-4.0
SPDX-License-URL: https://spdx.org/licenses/CC-BY-4.0.html
SPDX-FileCopyrightText: Huawei Inc.
-->
#+end_export

#+ATTR_HTML: :width 10% :align right
https://docs.oniroproject.org/en/latest/_static/ONIRO.svg

#+BEGIN_NOTES

WIP version 
https://www.volatile.rzr.cloudns.org/docs/oniro-lvgl/


#+ URL: https://cryptpad.fr/code/#/2/code/edit/fVu5h2jOBXzGmpn8Uuw5YgvR/#LGVL
#+ Day Sunday 2022-02-06 : Start time 	10:00:00  / 25min

Abstract:

LVGL: A versatile UI toolkit for MCU & CPU
An UI framework for Eclipse Onino a cross kernel OS

LVGL is an open-source graphics library to create embedded GUI.

By its flexibility, this toolkit is well matching Oniro project's requirements to build a multiple kernel OS for IoT devices or enable interactions in a multiple devices environment.

UI toolkits are well established in CPU world (desktop, mobile), but what about in more constrained system ?

Often tied to one vendor, the choice is often limited. However OpenSource project LVGL provides everything developers need to create embedded GUI with easy-to-use graphical elements, beautiful visual effects and low memory footprint.

This library is compact and flexible enough to be thread through a regular Linux system. Of course this will not compete with other popular frameworks like Qt or GTK, but it has some advantages worth sharing: where portability matters more than eye candy features.

Oniro's Bitbake recipes enable makers to build products with user interface in a Yocto environment that can target different kernels or graphics systems.

Oniro's blueprints will illustrate integration details to match a product requirement.

Demos of vending machine (running on Linux+Wayland) or keypad (on Zephyr MCU OS) will be shown too.

https://fosdem.org/2022/schedule/event/lvgl/

#+END_NOTES

* Agenda
  - Introduction
  - LVGL
  - Oniro project
  - Integration showcase

* Introduction
   #+ATTR_REVEAL: :frag (fade-in)
  - Philippe Coval is involved into Oniro Project
    - [[https://www.astrolabe.coop/members/philippe-coval/][Astrolabe constultant]] based in France
    - for [[https://www.ostc-eu.org/][Huawei Open Source Tech Center]]
  - G치bor Kiss-V치mosi is the founder of [[https://lvgl.io/][LVGL]]
    - CEO of LVGL LLC
    - Developing LVGL and providing [[https://lvgl.io/services][Services]]

* What is LVGL?
  :PROPERTIES:
  :reveal_background: https://lvgl.io/assets/images/img_2.webp#image.png
  :reveal_background_opacity: 0.07
  :END:
  
  #+ATTR_REVEAL: :frag (fade-in)
  - Light and Versatile Graphics Library
    - Open source (MIT license)
    - Platform independent, and scalable
  - First published in 2016 on [[https://github.com/lvgl/][GitHub]]
    - Now has 8.3k stars and 200+ contributors
  - Integrated into many OS and HW solutions:
    - NXP, ESP, NuttX, Zephyr, Rt-Thread, Adafruit, and many more

#+BEGIN_NOTES
Thank you and welcome! So LVGL stands for Light and Versatile Graphics Library. It's an open source, MIT licensed graphics library to easily create modern UIs. LVGL's primary targets are the resource constrained embedded devices such as smart watches, smart homes, instruments, kitchen aid devices, medical devices and things like that. However, recently LVGL got some exciting features to effectively work for desktop apps too. So you can create even 4k apps that uses the video card of the PC to achieve high FPS. 

LVGL was started as my hobby project more than 10 years ago.
For a couple of years I used it only for myself but in 2016 I've shared it on GitHub. It turned out there was a great need for a library like this.

Since then LVGL got more than 200 contributors and more then 8k stars on GitHub. 
It's frequently among the most popular C repositories of GitHub and was adopted by many large and popular project.

We have a good relationship with vendors like NXP, Espressif or Ardunio and RTOS project like Rt-Thread, Zephyr, NuttX and recently Oniro who adopted LVGL into their ecosystem. 

About a year ago we have created LVGL LLC in order to provide a solid background for the library and provide services to the users of LVGL.
#+END_NOTES

* LVGL UI Demo
  :PROPERTIES:
  :reveal_background: https://lvgl.io/assets/images/img_2.webp#image.png
  :reveal_background_opacity: 0.07
  :END:

@@html:<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/FYhmi6MamRs#LVGLMusic" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>@@

#+BEGIN_NOTES
TODO: use stable links
#+END_NOTES

* LVGL Features
  :PROPERTIES:
  :reveal_background: https://camo.githubusercontent.com/b9f59645f486900c0f75fb74b2af9fefbda3575ead45de9194d60e8176c02f40/68747470733a2f2f6c76676c2e696f2f6173736574732f696d616765732f6c76676c5f776964676574735f64656d6f2e676966#image.gif
  :reveal_background_opacity: 0.07
  :END:

  #+ATTR_REVEAL: :frag (fade-in)
  - Many built in [[https://docs.lvgl.io/master/widgets/][Widgets]]:
    - buttons, charts, lists, sliders, images, etc.
  - Advanced graphics with animations
    - anti-aliasing, opacity, smooth scrolling
  - Fully customizable with [[https://docs.lvgl.io/master/overview/coords.html?highlight=css][CSS-like styles]]
  - Supports various input devices:
    - touchpad, mouse, keyboard, encoder, etc
  - Multi-language support with UTF-8 encoding
  - Binding to [[https://docs.lvgl.io/master/get-started/micropython.html?highlight=python][MicroPython]]


#+BEGIN_NOTES

As you could see LVGL has may built in widgets. 
Buttons, charts, lists, sliders, images, tabview, various type of meters and so on. 
You can simply create, delete and adjust the widgets run time.   
    
As the users get use to the UIs of the smartphones they expect the same quality on other devices too. 
To give this experience to the users with LVGL you can draw anti-aliased shapes, use opacity, various blending modes or smoothly scroll long content, animations and so on. Basically what you usually see in Android apps can be realized with LVGL too. 
  
The widgets of LVGL are highly customization. We adopted a CSS-like styling scheme and adopted it's boxing modle, property names, cascading and inheritance philosophy and even its modern layouts. 
Namely flexbox and grid. With these versatile layouts the widgets can be easily positioned in a responsive way!

Unlike smartphones LVGL is not limited to touchpad or mouse input devices. The UIs created with LVGL can be navigated and used with keyboard too by pressing TAB to change focus. In fact, even a single rotary encoder, supporting rotation and push, is suitable to control the whole UI. You can even have multiple encoders assigned to a specfic group of the widgets. For example an instrument with 2 channels can be controlled  by 2 encoders, each assigned to the widgets of a different channel.  

You can also create multi language UIs. LVGL supports UTF-8 encoding, mixing RTL and LTR languages and the special requirements of Arabian and Persian languages. 
We have an internationlization library to get the strings to translate from the source-code and, export them into yaml files where you can translate them, and build source-code from the translations again, allowing you to select the current language of the UI.
   

LVGL has binding to Micropython. Micropython is a Python subset, basically it gives you Python-like experience on embedded devices. And this binding allows you to create UIs using LVGL in Python.
 
#+END_NOTES

* Scalable and Portable
  :PROPERTIES:
  :reveal_background: https://lvgl.io/assets/images/img_2.webp#image.png
  :reveal_background_opacity: 0.07
  :END:

  #+ATTR_REVEAL: :frag (fade-in)
  - Written in C for maximal compatibility
    - C++ compatible
  - Hardware independent:
    - use with any MCU and display
  - OS, external memory, GPU are optional
  - Scalable: 
    - from small MCUs (>64 kB Flash, 16 kB RAM)
    - to desktop PCs with 4k displays

#+BEGIN_NOTES

Let's how can you use LVGL in your project! LVGL is written in C and depends only standard C library headers. As most of the C project, LVGL also can be used in C++ environment too. 

For build systems we support make, Cmake, but LVGL works with simple managed builds too. That is, you can copy it into Eclipse or VSCode, refresh the project, and it just works. 

As LVGL is just a buch of open-source C and H files, it's fully vendor agnostic. You can build it for any MCU or board. There is no limitation in display type either. Of course you can use it with normal RGB display, gray scale or monochrome displays, or with any special environment. 

Just to mention interesting use cases, someone used LVGL to create a UI in virtual reality environment. Some other users create UEFI BIOS UI, others integrated LVGL with Nintendo, but our demos are built run in a web browser. 
      
#+END_NOTES

* Porting LVGL
  :PROPERTIES:
  :reveal_background: https://lvgl.io/assets/images/img_2.webp#image.png
  :reveal_background_opacity: 0.07
  :END:
  #+ATTR_REVEAL: :frag (fade-in)
  - Only 2 functions are needed to port LVGL:
     #+ATTR_REVEAL: :frag (fade-in)
    1. A [[https://docs.lvgl.io/latest/en/html/porting/display.html][Render ready callback]]
       - to copy the rendered image to the screen
    2. An [[https://docs.lvgl.io/latest/en/html/porting/indev.html][Input read callback]]
       - to read the touchpad or other device
  - Flexible architecture:
    - you can add GPU support in the pipeline
    - hook any drawing drawing operations

#+BEGIN_NOTES

To port LVGL to your system usually you need only 2 functions. One to copy the rendered image to the screen and on other to read you input device, for example a touch pad. That's it. 
    
If you want to make the most out of your hardware, LVGL allows you to replace any built-in draw function to hook in external ones, for example to use GPU for some cases. 

Or even the whole software rendering engine can be replaced. We have built in support for SDL, which is a drawing library for desktop and it uses the video card too.   
  
#+END_NOTES

* Design with SquareLine ($)
  :PROPERTIES:
  :reveal_background: https://lvgl.io/assets/images/img_2.webp#image.png
  :reveal_background_opacity: 0.07
  :END:
@@html:<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/UrSkzbuuGaw#Edgeline" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>@@

[[https://youtu.be/UrSkzbuuGaw#Edgeline][游닠]]

#+BEGIN_NOTES
Although it's not open source, but a very important milestone in LVGL. 
In January we have released SquareLine Studio which is a professioanl drag and drop UI editor for LVGL.

SquareLine Studio is ideal for both hobbyists or professional teams, designers and developers too. 
On promotional price you can subscribe for a personal plan for $9 and a business plan for $85.

Being a proprietary software it's out of the scope of FOSDEM but you can learn more about SquareLine Studio at squareline.io.

So that's it in short about LVGL.  Phil will continue from here with the introduction the Oniro project. Thank you.

#+END_NOTES

* 
  :PROPERTIES:
  :reveal_background: https://oniroproject.org/images/share.png
  :reveal_background_opacity: 1
  :END:
  #+ATTR_HTML: :width 45% :align center style="border:0px solid black;"
 
* The Oniro Project
  :PROPERTIES:
  :reveal_background: https://www.eclipse.org/org/artwork/images/eclipse_foundation_logo_wo.png
  :reveal_background_opacity: 0.07
  :END:
   #+ATTR_REVEAL: :frag (fade-in)
  - An independent [[https://projects.eclipse.org/projects/oniro][Eclipse Foundation project]]
  - An open source distributed operating system
    - For diverse IoT devices (big and small)
    - Cross kernel, focus on interoperability
  - Defragment development for embedded sys:
    - Avoid technology silos
    - Unified tooling, common policies,

* UI Requirements
   #+ATTR_REVEAL: :frag (fade-in)
  - Oniro can support FLOSS toolkits:
    - Qt, GTK+, EFL... or Web frameworks
  - LVGL works on many flavors of Oniro devices
    - A common denominator for CPU/MCU
      - For cross kernel Oniro apps
  - Challenge: Prototype app on CPU (Linux)
    - rebase on MCU (Zephyr or Other)

* Oniro Linux flavour
 :PROPERTIES:
 :reveal_background: https://cdn.fosstodon.org/media_attachments/files/107/269/294/404/602/312/original/67b165042b685e6b.jpeg
 :reveal_background_opacity: 0.07
 :END:  
  
   #+ATTR_REVEAL: :frag (fade-in)
  - Reference "[[https://booting.oniroproject.org/distro/components/vending-machine-ui-application/][Vending machine]]" [[https://fosdem.org/2022/schedule/event/oniro_blueprints/][blueprint]]
  - Using lvgl v8 with wayland driver
    - build using bitbake recipe
      - Upstreamed ([[https://git.openembedded.org/meta-openembedded/log/?qt=grep&q=lvgl][meta-openembedded]])
  - 2 apps: UI + controller (websockets)
  - Shipped into customized distro with variables:
    - Screen size, allocator, fonts
    - weston config for kiosk application

   
* Oniro's Vending machine

@@html:<iframe width="560" height="315" sandbox="allow-same-origin allow-scripts allow-popups" title="oniroproject-vending-machine-osxp2021" src="https://diode.zone/videos/embed/a939af1f-5e1e-40ab-a006-8fc17e8c37da" frameborder="0" allowfullscreen></iframe>@@

[[https://youtu.be/kxciPcaR33o#oniroproject-vending-machine-osxp2021][游닠]]
[[https://www.youtube-nocookie.com/embed/kxciPcaR33o#oniroproject-vending-machine-osxp2021][游닠]]


* Oniro's Keypad
 :PROPERTIES:
 :reveal_background: https://files.mastodon.social/media_attachments/files/107/603/519/184/782/270/original/5ad14fc987d4bcd9.jpeg
 :reveal_background_opacity: 0.9
 :END:


* Oniro Zephyr flavour                                                 :TODO:
 :PROPERTIES:
 :reveal_background: https://files.mastodon.social/media_attachments/files/107/603/519/184/782/270/original/5ad14fc987d4bcd9.jpeg
 :reveal_background_opacity: 0.15
 :END:

  #+ATTR_REVEAL: :frag (fade-in)
  - Oniro [[https://fosdem.org/2022/schedule/event/oniro_blueprints/][blueprint]]: "[[https://booting.oniroproject.org/distro/blueprints/keypad][Keypad]] device"
    - Custom [[https://booting.oniroproject.org/distro/blueprints/keypad/zephyr-keypad][zephyr-keypad]] app (WIP)
      - built using bitbake ([[https://git.yoctoproject.org/meta-zephyr][meta-zephyr]] layer)
        - shipping [[https://github.com/zephyrproject-rtos/lvgl/commits/zephyr][zephyr fork of LVGL]] (v7)
      - work out of the box on [[https://www.nordicsemi.com/Products/Development-hardware/nRF52840-DK][nRF52840]]
  - Oniro's plan: [[https://booting.oniroproject.org/distro/meta-zephyr][meta-zephyr]] (Goofy)
    - [[https://booting.oniroproject.org/distro/blueprints/keypad/zephyr-keypad/-/issues/1][Align to v8]] : [[https://github.com/zephyrproject-rtos/zephyr/pull/41336][zephyr]]'s [[https://github.com/zephyrproject-rtos/lvgl/pull/15][lvgl]] (Thx [[https://booting.oniroproject.org/brgl][@brgl]])
    - KConfig to customize (thx [[https://booting.oniroproject.org/pidge][@pidge]])
  - Challenge: Cross kernel [[https://forum.lvgl.io/t/dialog-lvgl-ui-utility-to-use-along-scripts/6808][dialog-lvgl]] app

#+BEGIN_NOTES
https://git.yoctoproject.org/meta-zephyr/tree/conf/machine?h=dunfell
https://booting.oniroproject.org/distro/meta-zephyr-bsp
#+END_NOTES



* Summary                                                              :TODO:
  #+ATTR_REVEAL: :frag (fade-in)
  - LVGL is portable library for MCU
  - Also CPU using drivers: Wayland, SDL
  - Oniro is crosskernel OS
    - with "[[https://fosdem.org/2022/schedule/event/oniro_blueprints/][blueprint]]" projects using LVGL
      - Linux: Vending machine
      - Zephyr: Keypad
  - Visit [[https://fosdem.org/2022/schedule/event/welcome_oniro/][FOSDEM Oniro's stand]] for more!
   
* Resources and more:
  - https://lvgl.io/
    - https://github.com/lvgl/lvgl
  - https://OniroProject.org/
    - https://docs.OniroProject.org/
    - https://booting.OniroProject.org/
  - https://eclipse.org/
  - https://yoctoproject.org/
  - https://zephyrproject.org/

* Extras ?
  - [[https://forum.ostc-eu.org/t/openharmony-at-fosdem-21/180][Fosdem 2021]]
  - [[https://www.eclipsecon.org/2021][EclipseCon 2021]]
  - [[https://www.sfscon.it/programs/2021/#][SFSCON2021]]

* Howto: Vending machine

   @@html:<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/HQ9hD63ypvI#VendingMachine" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>@@
    
* Video Playback
  @@html:<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/p-gSvehb-As#OniroWelcome" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>@@
  #+BEGIN_NOTES
  TODO: update once published at:
  https://fosdem.org/2022/archives/
  #+END_NOTES
